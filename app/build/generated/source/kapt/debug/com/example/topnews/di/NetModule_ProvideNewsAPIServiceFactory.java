// Generated by Dagger (https://dagger.dev).
package com.example.topnews.di;

import com.example.topnews.data.api.NewsAPIService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetModule_ProvideNewsAPIServiceFactory implements Factory<NewsAPIService> {
  private final NetModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetModule_ProvideNewsAPIServiceFactory(NetModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public NewsAPIService get() {
    return provideNewsAPIService(module, retrofitProvider.get());
  }

  public static NetModule_ProvideNewsAPIServiceFactory create(NetModule module,
      Provider<Retrofit> retrofitProvider) {
    return new NetModule_ProvideNewsAPIServiceFactory(module, retrofitProvider);
  }

  public static NewsAPIService provideNewsAPIService(NetModule instance, Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsAPIService(retrofit));
  }
}
