// Generated by Dagger (https://dagger.dev).
package com.example.topnews.di;

import com.example.topnews.data.repository.NewsRepository;
import com.example.topnews.ui.viewmodel.NewsViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class FactoryModule_ProvideViewModelFactoryFactory implements Factory<NewsViewModelFactory> {
  private final FactoryModule module;

  private final Provider<NewsRepository> newsRepositoryProvider;

  public FactoryModule_ProvideViewModelFactoryFactory(FactoryModule module,
      Provider<NewsRepository> newsRepositoryProvider) {
    this.module = module;
    this.newsRepositoryProvider = newsRepositoryProvider;
  }

  @Override
  public NewsViewModelFactory get() {
    return provideViewModelFactory(module, newsRepositoryProvider.get());
  }

  public static FactoryModule_ProvideViewModelFactoryFactory create(FactoryModule module,
      Provider<NewsRepository> newsRepositoryProvider) {
    return new FactoryModule_ProvideViewModelFactoryFactory(module, newsRepositoryProvider);
  }

  public static NewsViewModelFactory provideViewModelFactory(FactoryModule instance,
      NewsRepository newsRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideViewModelFactory(newsRepository));
  }
}
