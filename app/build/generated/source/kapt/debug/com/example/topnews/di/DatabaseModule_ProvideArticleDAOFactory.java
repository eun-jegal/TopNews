// Generated by Dagger (https://dagger.dev).
package com.example.topnews.di;

import com.example.topnews.data.db.ArticleDAO;
import com.example.topnews.data.db.ArticleDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_ProvideArticleDAOFactory implements Factory<ArticleDAO> {
  private final DatabaseModule module;

  private final Provider<ArticleDatabase> databaseProvider;

  public DatabaseModule_ProvideArticleDAOFactory(DatabaseModule module,
      Provider<ArticleDatabase> databaseProvider) {
    this.module = module;
    this.databaseProvider = databaseProvider;
  }

  @Override
  public ArticleDAO get() {
    return provideArticleDAO(module, databaseProvider.get());
  }

  public static DatabaseModule_ProvideArticleDAOFactory create(DatabaseModule module,
      Provider<ArticleDatabase> databaseProvider) {
    return new DatabaseModule_ProvideArticleDAOFactory(module, databaseProvider);
  }

  public static ArticleDAO provideArticleDAO(DatabaseModule instance, ArticleDatabase database) {
    return Preconditions.checkNotNullFromProvides(instance.provideArticleDAO(database));
  }
}
