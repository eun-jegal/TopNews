// Generated by Dagger (https://dagger.dev).
package com.example.topnews.di;

import com.example.topnews.data.NewsRemoteDataSource;
import com.example.topnews.data.api.NewsAPIService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteDataSourceModule_ProvideNewsRemoteDataSourceFactory implements Factory<NewsRemoteDataSource> {
  private final RemoteDataSourceModule module;

  private final Provider<NewsAPIService> newsAPIServiceProvider;

  public RemoteDataSourceModule_ProvideNewsRemoteDataSourceFactory(RemoteDataSourceModule module,
      Provider<NewsAPIService> newsAPIServiceProvider) {
    this.module = module;
    this.newsAPIServiceProvider = newsAPIServiceProvider;
  }

  @Override
  public NewsRemoteDataSource get() {
    return provideNewsRemoteDataSource(module, newsAPIServiceProvider.get());
  }

  public static RemoteDataSourceModule_ProvideNewsRemoteDataSourceFactory create(
      RemoteDataSourceModule module, Provider<NewsAPIService> newsAPIServiceProvider) {
    return new RemoteDataSourceModule_ProvideNewsRemoteDataSourceFactory(module, newsAPIServiceProvider);
  }

  public static NewsRemoteDataSource provideNewsRemoteDataSource(RemoteDataSourceModule instance,
      NewsAPIService newsAPIService) {
    return Preconditions.checkNotNullFromProvides(instance.provideNewsRemoteDataSource(newsAPIService));
  }
}
