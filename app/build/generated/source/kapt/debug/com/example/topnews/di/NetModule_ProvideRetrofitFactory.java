// Generated by Dagger (https://dagger.dev).
package com.example.topnews.di;

import com.google.gson.Gson;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetModule_ProvideRetrofitFactory implements Factory<Retrofit> {
  private final NetModule module;

  private final Provider<Gson> gsonProvider;

  private final Provider<OkHttpClient> clientProvider;

  public NetModule_ProvideRetrofitFactory(NetModule module, Provider<Gson> gsonProvider,
      Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.gsonProvider = gsonProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofit(module, gsonProvider.get(), clientProvider.get());
  }

  public static NetModule_ProvideRetrofitFactory create(NetModule module,
      Provider<Gson> gsonProvider, Provider<OkHttpClient> clientProvider) {
    return new NetModule_ProvideRetrofitFactory(module, gsonProvider, clientProvider);
  }

  public static Retrofit provideRetrofit(NetModule instance, Gson gson, OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(instance.provideRetrofit(gson, client));
  }
}
